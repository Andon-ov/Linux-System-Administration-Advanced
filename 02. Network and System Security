Network and System Security 101

1. Kernel Parameters

    Current State of a Running Linux System

    Available via the procfs virtual filesystem mounted at /proc
        There are both read-only and writeable items
        Writable items are in /proc/sys
        Some of the namespaces are kernel, net, etc.
        Information can be found via man 5 proc

    Working with Kernel Variables

        Can be read and written via echo and sysctl
        Persistent configuration is stored in /etc/sysctl.conf or /etc/sysctl
        To apply part or all configuration changes we can use sysctl -p or sysctl --system


2. Resource Limits

    The pam_limits module sets limits on the system resources that can be obtained in a user-session
    They can be either soft or hard
    Can be set for user, group, or everyone
    Include open files, file locks, max number of processes, etc.
    Controlled via the bash built- in ulimit
    Persistent configuration is stored in /etc/security/limits.conf and /etc/security/limits.d/ (files are read in alphabetical order)



3. Access Control Lists
    File Mode (Standard Permissions)
        Permissions are read, write, and execute
        Permissions are for user, group, and others
        Represented in octal and symbolic notation
        Everyday tools include ls, stat, chown, chgrp, and chmod
        Default permissions are configured via umask

    File Mode (Special Permissions)
        Sticky bit Typically, is set on folders chmod o+t /folder
        SGID bit Can be set on folders and files chmod g+s /folder
        SUID bit Usually is set on executable files chmod u+s file.sh

    Access Control Lists
        Overcome file mode limitations, i.e. single user and single group
        Utilities installed via package
        System module loaded during boot process
        Controlled on filesystem level via options when mounting


    Access Control Lists Rules
        setfacl -m [d:]principal:[principal-name:]rights /path/to/object
        Rules can be default (set on folder level) or specific
        Multiple rules can be set simultaneously
        Principal can be user (u), group (g), or others (o)
        Rights are set via symbolic notation and can be r, w, x, -


    Special Access Control Lists

        NFS ACL
            nfs4_getfacl / nfs4_setfacl
            Separate package
            Implemented by the NFS Server and doesn’t rely on the filesystem

        CIFS ACL
            getcifsacl / setcifsacl
            Separate package
            Easier with winbind
            Implemented by the Samba Server and doesn’t rely on the filesystem

    DAC vs MAC

        Discretionary Access Control (DAC)
            Basic/standard layer
            Existing OS level access control
            Object owners have complete control

        Mandatory Access Control (MAC)
            Additional layer
            Object owners are obliged to honor MAC rules
            Considered after the DAC rules are evaluated

    DAC Solutions
        https://en.wikipedia.org/wiki/Linux_Security_Modules    

        Security Enhanced Linux (SELinux)
        Application Armor (AppArmor)
        Simplified Mandatory Access Control Kernel (SMACK)
        Tomoyo Linux

        All based on Linux Security Modules (LSM)

4. Context-based Security

    SELinux Introduction
        https://en.wikipedia.org/wiki/Security-Enhanced_Linux

        Objects
            Everything on a Linux system

            Processes
            Users
            Files
            Folders
            Sockets, etc.

        Labels
        (Security context)

            Attributes of an object and consists of four parts: User : Role : Type : Level
            Type is known as domain when in context of a process

        Type Enforcement

            The type of a source domain or process must be compatible with the target type


    SELinux Modes
        Disabled
            SELinux turned off
            No enhancing
            Only DAC is working

        Permissive
            SELinux turned on
            Policy loaded
            Not enforcing the policy
            Logs what would have been denied
            Labels objects

        Enforcing
            SELinux turned on
            Policy loaded
            Enforcing the policy

    SELinux Facts, Files and Tools

        Main configuration file:
            /etc/selinux/config

        Main configuration folders:
            /etc/selinux
            /usr/share/selinux
            /var/lib/share/selinux


        Default mode:
            enforcing
            Available modes:
            permissive and disabled

        Default policy:
            target
            Available policies:
            minimum and mls

        Context change tool:
            chcon
            Context restore tool:
            restorecon

        Other tools:
            getenforce, setenforce
            sestatus, seinfo, semodule
            sesearch, etc.

    SELinux Booleans

        Simple way to adjust behavior of SELinux

        Values can be read with getsebool and written with setsebool

        Additionally, the semanage command can be user get and set values

        Help can be retrieved with man semanage- boolean

        Can be on | off / 1 | 0 / true | false


    SELinux Logs

        auditd != running 
            /var/log/messages
            
        auditd == running
            /var/log/audit/audit.log

        auditd == running && setroubleshootd == running
            /var/log/messages
            /var/log/audit/audit.log


    SELinux Additional Tools and Functions

        audit2allow
            Generates policy allow/dontaudit rules from logs of denied operations

        audit2why
            Translates audit messages into a description of why the access was denied

        sealert
            The user interface component to the setroubleshoot system

        Permissive domains
            Are a way to debug our system without compromising the whole system



    Application Armor (AppArmor)

    AppArmor Introduction
        https://en.wikipedia.org/wiki/AppArmor

        Restricts programs'capabilities with per-program profiles
        Extensible via manually created modules or ones, created in learning mode
        Works with file paths and it is filesystem agnostic
        Supported by all major distributions

    AppArmor Files and Tools
        https://gitlab.com/apparmor/apparmor/-/wikis/home

        Profiles are stored in /etc/apparmor.d
        Disabled ones are symlinked in /etc/apparmor.d/disable

        Tools are available via apparmor-utils package
        Extra profiles can be installed via apparmor-profiles-extra

        Some of tools are aa-enforce, aa-status, aa-autodep, etc.
        There is a second (symlinked) set of tools



5. Linux Audit
    Linux Audit Overview
    https://wiki.archlinux.org/index.php/Audit_framework

        It is all about who did what and when

        Listens for events reported by the kernel and logs them to a log file

        Allows the tracking of both UID and AUID Can track files and folders access and syscalls



    Linux Audit Files and Tools

        Processed events are stored in /var/log/audit/audit.log
        Configuration  information and rules are  stored in  /etc/audit/auditd.conf and /etc/audit/rules.d/
        Main tools include auditctl, ausearch, etc.

6. Packet Filtering
    Linux Firewall (Firewalld)
    https://firewalld.org/documentation/concepts.html


    More On Firewalld

        Easy to use solution with wide adoption and support for zones, services, rich rules, etc.

        Separate runtime and permanent configuration

        Main configuration file: 
            /etc/firewalld/firewalld.conf

        Configuration directories:
            /etc/firewalld
            /usr/lib/firewalld

    Netfilter Overview
        https://www.netfilter.org/index.html

        Packet filtering framework inside the Linux 2.4.x and later kernel

        Set of hooks inside the Linux kernel that allows kernel modules to register callback functions with the network stack

        A registered callback function is then called back for every packet that traverses the respective hook within the network stack

        Enables packet filtering, network address [and port] translation (NA[P]T) and other packet mangling

    Netfilter Terminology

        Each table has a chain
        Each chain has rules
        Each rule has a match and target
        Default rule captures all packets that do not conform any rule

                Tables
                Chain
                Rule Match Target
                Rule Match Target
                Default Target


    Netfilter Tables and Chains

        Tables are collections of chains
        Chains determine what time in the packet flow it is evaluated
            PREROUTING (before routing decision)
            INPUT (delivered to local process)
            FORWARD (routed, non-local packets)
            OUTPUT (sent packets, from local processes)
            POSTROUTING (after routing decision)

                Tables
                Chain
                Rule Match Target
                Rule Match Target
                ...
                Default Target

    Netfilter Targets and States

        Matches describe interesting packets
        Targets
            ACCEPT (allow packet)
            REJECT (replies prohibited)
            DROP (drops, no replies)
            LOG (record info to file)
        States are NEW, ESTABLISHED, RELATED

                Tables
                Chain
                Rule Match Target
                Rule Match Target
                ...
                Default Target

    Netfilter Default Tables and Chains

        FILTER
            INPUT
            FORWARD
            OUTPUT

        NAT
            PREROUTING
            OUTPUT
            POSTROUTING

        MANGLE
            PREROUTING
            INPUT
            FORWARD
            OUTPUT
            POSTROUTING


    iptables

        https://www.netfilter.org/projects/iptables/index.html


        iptables is the userspace command line program used to configure the Linux 2.4.x and later packet filtering ruleset

        Listing the contents of the packet filter ruleset
        Adding / removing / modifying rules in  the packet filter  ruleset
        Listing / zeroing per-rule counters of the packet filter ruleset

    nftables
    
        https://wiki.nftables.org/wiki-nftables/index.php/Main_Page

        nftables is the new packet classification framework that replaces the existing {ip,ip6,arp,eb}_tables infrastructure
        It is available in Linux kernels >= 3.13

        Comes with a new command line utility nft whose syntax is different to iptables
        It also comes with a compatibility layer that allows to run iptables commands over the new nftables kernel framework
        Provides generic set infrastructure that allows you to construct mapsand concatenation